#!/bin/bash

#
# Suffix for new project folder
#
SUFFIX=$(date +"%F")-

#
# Print help message
#
print_help()
{
    echo ""
    echo "project - Project management tool for the shell"
    echo ""
    echo "Usage:" 
    echo "    project -h|--help          Print this help message"
    echo "    project help               Print this help message" 
    echo "    project status             Print current project information and configuration"
    echo "    project create STRING...   Creates a new project"
    echo "    project list               Shows the project folder (time sorted by last modification)"
    echo "    project backup             Creates a backup as .tar file of current project"
    echo ""
    echo "DESCRIPTION"
    echo "    The script contains various functionalities to organize projects within the shell."
    echo "" 
    echo "    Working correctly, the script requires the following environment variables:"
    echo "        PROJECTS_PATH ....... Folder to store projects"
    echo "        CURRENT ............. Current project path"
    echo "        OUTPUT .............. Output folder for tools in CURRENT"
    echo ""
    echo "    For more information and setup, see" 
    echo "          https://github.com/GhostActive/effective-shell-for-pentesting/tree/main/utils"
    echo ""
    echo "    The specific operations of the script can be called via subcommands shwon in 'Usage'."
    echo ""
    echo "EXAMPLE"
    echo "    # Create a new project"    
    echo "    \$ project create SampleCustomer SampleProject"
    echo "    \$ project list"
    echo "    drwxrwxr-x 3 joe joe 4096 Sep 18 19:32 2021-09-18-SampleCustomer-SampleProject"
    echo ""
    echo "    # Create a backup"
    echo "    \$ project backup"
    echo "    $ ls \$PROJECTS_PATH/backups"
    echo "    2021-09-18-SampleCustomer-SampleProject-2021-09-18-193453-CEST.tar"
    echo ""
    echo "HINT"
    echo "    Note that at runtime the symbolic link '\$CURRENT' is set to new project folder."
    echo ""
    echo "AUTHOR"
    echo "    GhostActive, https://github.com/GhostActive/"
    echo ""
    echo "COPYRIGHT"
    echo "    2021, GNU General Public License v3.0"
    echo ""
    echo "VERSION"
    echo "    1.0"
    echo ""
    echo "SEE ALSO"
    echo "    Github: Effective Shell For Pentesting"
    echo "        https://github.com/GhostActive/effective-shell-for-pentesting"
}

#
# Create new project folder
#
create_project()
{
    #
    # Concatenate project root path and arguments  
    #
    PROJECT="$PROJECTS_PATH/$SUFFIX$(echo $@ | tr -s ' ,;#!%&/:.' '-')"

    #
    # Create new project folder
    #
    mkdir -p $PROJECT

    #
    # Create or update symbolic link CURRENT referencing new project folder
    #
    if [[ -L $CURRENT ]]
    then
        ln -sfn $PROJECT $CURRENT
    else
        ln -s $PROJECT $CURRENT
    fi

    #
    # Create folder structure
    #
    mkdir -p $OUTPUT/

    if ! [[ -z ${PROJECT_TEMPLATE} ]]
    then
        if ! [[ -d ${PROJECT_TEMPLATE}/ ]]
        then
            echo "An error occurred: Missing template folder '$PROJECT_TEMPLATE'"
            exit 1
        fi

        cp -r $PROJECT_TEMPLATE/* $CURRENT
    fi
}

#
# Show content of folder $PROJECTS_PATH/ 
#
print_projects()
{
    cd $PROJECTS_PATH/ && ls -lt -d *
}

#
# Create a .tar from $CURRENT
#
backup_project()
{
    mkdir -p $PROJECTS_PATH/backups

    CURRENT_PROJECT=$(realpath $CURRENT)
    CURRENT_PROJECT=$(basename $CURRENT_PROJECT)

    cd $PROJECTS_PATH/ && tar -cvf backups/$CURRENT_PROJECT-$(date +'%F-%H%M%S-%Z').tar $CURRENT_PROJECT/
}

#
# Print information about current project and environment variables
#
print_status()
{
    echo "Current Project:"
    echo "$(date -r $CURRENT) $(realpath $CURRENT)"  
    echo ""
    echo "PROJECTS_PATH: $PROJECTS_PATH"
    echo "CURRENT:       $CURRENT"
    echo "OUTPUT:        $OUTPUT"
    echo "Template:      $PROJECT_TEMPLATE"
}

#
# Check if command line parameters contains -h or --help
#
while getopts ":h" option; do
    case $option in
        h)
            print_help
            exit 0;;
        help)
            print_help
            exit 0;;
   esac
done

#
# Check if all required environment variables are defined
#
if [[ -z ${PROJECTS_PATH} ]] ||
        [[ -z ${CURRENT} ]] ||
        [[ -z ${OUTPUT} ]]
    then
        echo "At least one required environment variable is not defined."
        echo "Check values with 'project-status'"
        exit 1
fi

#
# Choose concrete operation
#
case $1 in

  help)
    print_help
    exit 0;;

  create)
    if [[ $# -lt 2 ]]
    then
        echo "An error occurred: No project name is defined."
        exit 1
    fi

    create_project ${@:2}
    exit 0;;

  list)
    print_projects
    exit 0;;

  backup)
    backup_project
    exit 0;;

  status)
    print_status
    exit 0;;

  *)
    echo "An error occurred: Unknown command '$1'."
    echo "For correct usage, see 'project help'"
    exit 1;;
esac