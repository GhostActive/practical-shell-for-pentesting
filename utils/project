#!/bin/bash
#
# GNU General Public License v3.0
#   
# Copyright (C) 2021 GhostActive
#
# Author
#    GhostActive, https://github.com/ghostactive
#
# Version
#    1.0
#

# Suffix for new project folder
PREFIX=$(date +"%F")-

print_help()
{
    echo ""
    echo "project - Creates new project folder"
    echo ""
    echo "Usage: project [String...]" 
    echo ""
    echo "Options:"
    echo "    -h, --help      Print this help message"
    echo ""
    echo "Description"
    echo "    Creates a new project folder in directory \$PROJECTS_PATH." 
    echo "    For correct use the following environment variables must"
    echo "    be defined:"
    echo "        - PROJECTS_PATH   Root folder to store projects"
    echo "        - PROJECT         Reference to current project folder"
    echo "                          in \$PROJECTS_PATH"
    echo "        - OUTPUT          Reference to output folder in \$PROJECT"
    echo ""
    echo "    While creating a new project folder the symbolic link defined by"
    echo "    \$PROJECT is updated to the new project folder. Furthermore, the"
    echo "    folder \$OUTPUT is created. Each new project gets a prefix containing"
    echo "    the date of creation."
    echo ""
    echo "    Optionally, a template folder \$PROJECT_TEMPLATE can be defined."
    echo "    The content of the template folder is copied to new project folder"
    echo "    during the creation process."
    echo ""
    echo "    Sample - Definition of variables in .bashrc:"
    echo "        export PROJECTS_PATH ~/Projects"
    echo "        export PROJECT \$PROJECTS_PATH/current"
    echo "        export OUTPUT \$PROJECTS_PATH/current/out"
    echo "        export PROJECT_TEMPLATE \$PROJECTS_PATH/template"
    echo ""
    echo "Examples:"
    echo "    # Show current configuration"    
    echo "    project"
    echo ""
    echo "    # Create new project folder"
    echo "    project samplecustomer sampleproject"
    echo ""
}

# Check if command line parameters contains -h or --help
while getopts ":h" option; do
    case $option in
        h)
            print_help
            exit 0
            ;;
        help)
            print_help
            exit 0
            ;;
   esac
done

# Check required environment variables
if [ -z ${PROJECTS_PATH+x} ] ||
   [ -z ${PROJECT+x} ] ||
   [ -z ${OUTPUT+x} ]
then
    echo "An error occurred: Missing environment variable(s)."
    echo ""
    echo "At least one required environment variable is not defined:"
    echo "PROJECTS_PATH   $(test -z ${PROJECTS_PATH+y} && echo 'Not ')Found"
    echo "PROJECT         $(test -z ${PROJECT+y} && echo 'Not ')Found"
    echo "OUTPUT          $(test -z ${OUTPUT+y} && echo 'Not ')Found"
    echo ""
    echo "For more information type 'project --help'." 

    exit 1
fi

if [[ $# -eq 0 ]]
then
    if [[ -d ${PROJECT} ]]
    then
        echo "Current Project:"
        echo "$(date -r $PROJECT) $(realpath $PROJECT)"  
    else
        echo "Can't find current project folder."
    fi
    
    echo ""
    echo "PROJECTS_PATH:    $PROJECTS_PATH"
    echo "PROJECT:          $PROJECT"
    echo "OUTPUT:           $OUTPUT"
    echo "PROJECT_TEMPLATE: $PROJECT_TEMPLATE"

    exit 0
fi

# Concatenate project root path and arguments  
NEW_PROJECT="$PROJECTS_PATH/$PREFIX$(echo $@ | tr -s ' ,;#!%&/:.' '-')"

mkdir -p $NEW_PROJECT

# Create or update symbolic link CURRENT referencing new project folder
if [[ -L $PROJECT ]]
then
    ln -sfn $NEW_PROJECT $PROJECT
else
    ln -s $NEW_PROJECT $PROJECT
fi

mkdir -p $OUTPUT/
    
# Copy content of template folder to new project folder - if existing
if ! [[ -z ${PROJECT_TEMPLATE} ]]
then
    if ! [[ -d ${PROJECT_TEMPLATE} ]]
    then
        echo "An error occurred: Missing template folder '$PROJECT_TEMPLATE'"
        exit 1
    fi

    cp -r $PROJECT_TEMPLATE/* $PROJECT/
fi
