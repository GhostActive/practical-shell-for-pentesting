#! /bin/bash
#
# GNU General Public License v3.0
#   
# Copyright (C) 2021 GhostActive
#
# Author
#    GhostActive, https://github.com/ghostactive
#
# Version
#    1.0
#

# Flag whether placeholder should be shown
BOOL_SHOW_MODE="False"

# Flag whether templates should be edit with editor
BOOL_EDIT_MODE="False"

# Position in args of template source (path or '-') 
INT_SRC_POS=1


print_help(){

    echo ""
    echo "template - Replaces placeholders from given template"
    echo ""
    echo "Usage: template [-e|-s] (-|FILE) [KEY=VALUE...]"
    echo ""
    echo "Options:"
    echo "    -e          Enables post-editing mode and opens"
    echo "                configured editor while processing"    
    echo "    -h, --help  Prints this help message"
    echo "    -s          Enables show mode listing all placeholders"
    echo "                found in template"
    echo ""
    echo "Description:"
    echo "    The script replaces placeholder with format '{{ NAME }}' in"
    echo "    a given template."
    echo ""
    echo "    Input:  Two different types of input are supported. Reading"
    echo "            from stdin (-) and from file (FILE). Depending on the"
    echo "            input type, the script expects '-' or a FILE path."
    echo ""
    echo "    Mode:   By the flags -s (show mode) and -e (edit mode) the"
    echo "            behavoir can be controlled. In show mode the script only"
    echo "            reads the template, gets the placeholders and prints"
    echo "            them out. In edit mode, after replacing the placeholders"
    echo "            the configured text editor is opened for furhter processing."
    echo ""
    echo "    Values: Any number of key-value pairs can be passed. The key name"
    echo "            must corresponds to the name of the placeholder (case"
    echo "            sensitive). If not all placeholders from the template are"
    echo "            specified in argument list, they will be included in the"
    echo "            output without further modification. Keys and values are"
    echo "            separated by '=', for example 'name=Joe'."
    echo ""
    echo "    HINT: The used text editor is defined as global environment variable"
    echo "          \$EDITOR. It should be checked that the used editor does not"
    echo "          write (logging) messages to stdout or stderr while processing"
    echo "          the template, because the output is than included into the"
    echo "          processed template also written to stdout. Furhtermore, the name"
    echo "          of temporary file, loaded to text editor, should not be changed."
    echo "          Otherwise the canges from text editor are not applied. After"
    echo "          finishing editing, the file must be saved and the text editor"
    echo "          closed."
    echo ""
    echo "Examples:"
    echo "    # Read template from stdin"
    echo "    echo '{{ message }}' | template - message='Hello World'"
    echo ""
    echo "    # Read template from file and open with text editor"
    echo "    template -e input.txt message='Hello World' name=Joe age=42"
    echo ""
    echo "    # Read template and show placeholder"
    echo "    template -s input.txt"
    echo ""
}

while getopts ":hse" ARGUMENT; do
    case "$ARGUMENT" in
        e)
            BOOL_EDIT_MODE="True"
            ((INT_SRC_POS++))
            ;;
        s)
            BOOL_SHOW_MODE="True"
            ((INT_SRC_POS++))
            ;;
        h)
            print_help
            exit 0
            ;;
   esac
done

STR_SRC="${!INT_SRC_POS}"

if [ ! "$STR_SRC" = "-" ];
then
    if [[ -z $STR_SRC ]];then
        echo "Error: No source for a template has been defined."
        print_help
        exit 1
    fi
    
    if [[ ! -f $STR_SRC ]];then
        echo "Error: The specified path could not be found '$STR_SRC'."
        exit 2
    fi
fi

#
# Creates a temp file for further processing
#
if [[ "$STR_SRC" != "-" || ! -t 0 ]]
then
    CONTENT="$(cat $STR_SRC)"
fi

#
# Extract placeholders from template and exit - if SHOW_MODE is enabled
#
if [ "$BOOL_SHOW_MODE" = "True" ];then
    echo "$CONTENT" | grep -onE "\{\{ [a-zA-Z0-9\.]+ \}\}" | sort -u
    exit 0
fi

#
# Replace key-value pairs in temp file 
#
for PAIR in "${@:$INT_SRC_POS+1}"; do
    # escape slahes and backslashes
    PAIR="$(echo $PAIR | sed 's/\\/\\\\/g' | sed 's/\//\\\//g' )"
    KEY="{{ $(echo $PAIR | cut -f 1 -d '=') }}"
    VALUE="$(echo $PAIR | cut -f 2- -d '=')"
    CONTENT=$(echo "$CONTENT" | sed "s/$KEY/$VALUE/g")
done

#
# Opens text editor for post-editing the template - if EDIT_MODE is enabled
#
if [ "$BOOL_EDIT_MODE" = "True" ];then
    if [ -z ${EDITOR+x} ];then
        echo "The environment variable $EDITOR is not set."
        exit 1
    fi

    TMP_FILE=$(mktemp)
    echo "$CONTENT" > $TMP_FILE
    $EDITOR $TMP_FILE < /dev/tty > /dev/tty
    CONTENT="$(cat $TMP_FILE)"
    rm $TMP_FILE
fi

#
# Write template to stdout
#
echo "$CONTENT"
